// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Channel {
  SLACK
  MESSENGER
}

model users {
  id           String       @id @default(uuid())
  username     String       @unique
  password     String
  name         String?
  address      String?
  channelId    String?
  role_id      String?      @unique
  role         roles?       @relation(fields: [role_id], references: [id])
  create_at    DateTime     @default(now())
  comments     comments[]
  posts        posts[]
  plans        plans[]
  slackTokenId String?      @unique
  slackToken   slackTokens?
}

model slackTokens {
  id          String   @id @default(uuid())
  accessToken String
  user_id     String
  user        users    @relation(fields: [id], references: [slackTokenId])
  createdAt   DateTime @default(now())
}

model roles {
  id               String             @id @default(uuid())
  name             String
  users            users?
  role_permissions role_permissions[]
}

model permissions {
  id               String             @id @default(uuid())
  name             String
  role_permissions role_permissions[]
}

model role_permissions {
  roleId       String
  permissionId String
  role         roles       @relation(fields: [roleId], references: [id])
  permission   permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model comments {
  id           String   @id @default(uuid())
  user_id      String
  user         users    @relation(fields: [user_id], references: [id])
  comment_date DateTime @default(now())
  content      String
  post_id      String
  channel_id   String
  post         posts    @relation(fields: [post_id], references: [id])
}

model posts {
  id          String        @id @default(uuid())
  comments    comments[]
  title       String
  content     String
  user_id     String
  user        users         @relation(fields: [user_id], references: [id])
  post_date   DateTime      @default(now())
  update_date DateTime      @updatedAt
  post_images post_images[]
}

model plans {
  id               String             @id @default(uuid())
  user_id          String
  user             users              @relation(fields: [user_id], references: [id])
  title            String
  date             DateTime
  state            String             @default("pending")
  transportation   String
  money            Int
  kind_id          String
  kind             kinds              @relation(fields: [kind_id], references: [id])
  isChildren       Boolean
  activities       activities[]
  plan_on_province plan_on_province[]
}

model plan_on_province {
  plan_id     String
  plan        plans     @relation(fields: [plan_id], references: [id])
  province_id String
  province    provinces @relation(fields: [province_id], references: [id])

  @@id([plan_id, province_id])
}

model provinces {
  id               String             @id @default(uuid())
  name             String
  imageUrl         String
  plan_on_province plan_on_province[]
}

model kinds {
  id    String  @id @default(uuid())
  name  String  @unique
  plans plans[]
}

model notifications {
  id          String     @id @default(uuid())
  title       String
  activity_id String     @unique
  activity    activities @relation(fields: [activity_id], references: [id])
  sent_at     DateTime
  state       String
  message     String
  create_at   DateTime   @default(now())
}

model activities {
  id                   String             @id @default(uuid())
  plan_id              String
  activity_location_id String
  activity_location    activity_locations @relation(fields: [activity_location_id], references: [id])
  notifications        notifications?
  plan                 plans              @relation(fields: [plan_id], references: [id])
  start_date           DateTime
  end_date             DateTime
}

model activity_locations {
  id              String            @id @default(uuid())
  name            String
  address         String            @unique
  open_at         String
  close_at        String
  longitude       Decimal
  latitude        Decimal
  imageUrl        String
  transportation  String?
  money           String?
  activities      activities[]
  locationOnTypes locationOnTypes[]

  @@unique([name, address])
}

model locationOnTypes {
  activity_location_id String
  activity_location    activity_locations @relation(fields: [activity_location_id], references: [id])
  type_id              String
  type                 types              @relation(fields: [type_id], references: [id])

  @@unique([activity_location_id, type_id])
}

model types {
  id              String            @id @default(uuid())
  name            String            @unique
  locationOnTypes locationOnTypes[]
}

model post_images {
  id        String @id @default(uuid())
  post_id   String
  post      posts  @relation(fields: [post_id], references: [id])
  image_url String
}
